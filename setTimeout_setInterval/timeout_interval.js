// Разница между setTimeout и setInterval:
// setTimeout вызывает функцию один раз через определенный промежуток времени.
// setInterval вызывает функцию много раз через равные интервалы времени.


// setTimeout & setInterval.
// МОЖНО ОТЛОЖИТЬ ФУНКЦИЮ, ЗАДАТЬ ЧЕРЕЗ КАКОЕ ВРЕМЯ СРАБОТАЕТ ФУНКЦИЯ.
// ДОБАВИМ АНИМАЦИЮ.
let ball = document.getElementById('ball');
// ПЕРЕМЕННАЯ КОТОРАЯ БУДЕТ ПОКАЗЫВАТЬ ШАГ ШАРИКА.
// ШАГ ВЕРХНИЙ stepTop.
// ШАГ ЛЕВЫЙ stepTop.
let stepTop = 0;
let stepLeft = 0;

function move(){
    // += Обязательно с каждом запуском программа будет двигать на 3px наверх(будет добавляться3+3=6+3=9).
    stepTop += 3;
    // ПРИБАВИМ СТИЛЬ.
    ball.style.top = stepTop + 'px'; // ПРИБАВЛЯЕТСЯ В PX.
    console.log(stepTop); // ВЫЗЫВАЕМ STEPTOP, ЧТОБЫ ПОНИМАТЬ ГДЕ НА ДАННЫЙ МОМЕНТ НАХОДИМСЯ.
    // УСЛОВИЕ ЧТОБЫ ШАРИК НЕ ВЫЛЕТЕЛ ЗА ПРЕДЕЛЫ ЭКРАНА.
    if(stepTop > 50){
        stepLeft += 3;
        ball.style.left = stepLeft + 'px';
    };
};
// КОГДА ШАРИК ДОСТИГАЕТ БОЛЬШЕ 50PX, ОН НАЧИНАЕТ ДВИГАТЬСЯ В ПРАВО.
move();
// setInterval позволяет задать с каким интервалом мы хотим чтобы функция вызывалась.
// SETINTERVAL ПРИНИМАЕТ 2 АРГУМЕНТА.
// 1 АРГУМЕНТ. САМА ФУНКЦИЯ.
// 2 АРГУМЕНТ. КОЛИЧЕСТВО МИЛЛИСЕКУНД.

let timer = setInterval(move, 200000); // функция, количество миллисекунд.
// 1 секунда = 1000; 2 = 2000 И ТД.

// Создать функцию при клике чтобы шарик не уходил куда то далеко.
let btn = document.getElementById('btn');

btn.addEventListener('click', function(){
    // clearInterval принимает переменную, поместим setInterval в переменную.
    clearInterval(timer); // Функция браузерная, cтопает функцию.
});

// setTimout.
// Позволяет вызвать функцию через опеределенный участок времени.
function printNumber(){
    console.log(1);
};
// БРАУЗЕРНАЯ ФУНКЦИЯ.
// ЧЕРЕЗ КАКОЙ ПРОМЕЖУТОК ВРЕМЕНИ МЫ ВЫЗЫВАЕМ.
// ФУНКЦИЮ ВЫЗЫВАЕТСЯ НЕ СРАЗУ А ЧЕРЕЗ ОПРЕДЕЛЕННОЕ ВРЕМЯ ОДИН РАЗ.
// ПЕРЕДАЕМ НАЗВАНИЕ ФУНКЦИИ И ТОГДА ОНА САМА ВСЕ СДЕЛАЕТ И ВЫЗЫВЕТСЯ.
setTimeout(printNumber, 2000); // 1 ЧЕРЕЗ 3 СЕКУНДЫ.
console.log(2);
// Если выводить так, то 2 первой появится в консоли.
// Потому что setTimeout берет функцию и отсылает в Call Stack обрабатывает и ставит в очередь.
// Отправояет сначало в callStack затем в Web Apis выполняться, и пока все отправляется и проходит дальше.